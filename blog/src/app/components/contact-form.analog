<!--suppress ALL -->
<script lang="ts">
  import { inject } from '@angular/core';
  import { HttpClient } from '@angular/common/http';
  import { HotToastService } from '@ngneat/hot-toast';
  import { ReactiveFormsModule } from '@angular/forms';
  import { TranslocoDirective } from '@ngneat/transloco';
  import { FieldValidateFn, injectForm, injectStore, TanStackField } from '@tanstack/angular-form';

  defineMetadata({
    imports: [ReactiveFormsModule, TranslocoDirective, TanStackField],
    host: { class: 'w-full' },
  });

  const http = inject(HttpClient);
  const toast = inject(HotToastService);
  const contactForm = injectForm({
    defaultValues: {
      name: '',
      email: '',
      message: '',
    },
    onSubmit({ value }) {
      const { email, name, message } = value;
      http
        .post(`${environment.apiUrl}/send-email`, {
          name,
          email,
          message,
        })
        .subscribe({
          next: () => {
            toast.success('Email sent successfully', {
              duration: 3500,
              position: 'bottom-center',
            });
            contactForm.reset();
          },
          error: (error: HttpErrorResponse) => {
            toast.error(
              `Error ${error.status} sending email: ${error.statusText}`,
              {
                duration: 3500,
                position: 'bottom-center',
              },
            );
          },
        });
    },
  });

  const nameValidator: FieldValidateFn<any, any, any, any, string> = ({
                                                                        value,
                                                                      }) =>
    !value
      ? 'A name is required'
      : undefined;

  const emailValidator: FieldValidateFn<any, any, any, any, string> = ({
                                                                         value,
                                                                       }) =>
    !value ?
      'An email is required' : !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value) ? 'Please enter a valid email address' : undefined

  ;

  const messageValidator: FieldValidateFn<any, any, any, any, string> = ({
                                                                           value,
                                                                         }) =>
    !value
      ? 'A message is required'
      : undefined;

  const canSubmit = injectStore(contactForm, (state) => state.canSubmit);
  const isSubmitting = injectStore(contactForm, (state) => state.isSubmitting);

  function submitForm(event: SubmitEvent) {
    event.preventDefault();
    event.stopPropagation();
    void contactForm.handleSubmit();
  }
</script>

<template>
  <ng-container *transloco="let t; read: 'contact'">
    <div class="flex flex-auto flex-col items-center gap-3 pt-20">
      <div
        class="flex w-full flex-col justify-start gap-4 align-baseline md:max-w-md">
        <h1
          class=" before:bg-primary after:bg-primary relative mb-5 w-fit text-3xl font-bold
                before:absolute before:left-[98%] before:top-[70%] before:-z-10 before:h-5
                before:w-5 before:translate-y-0 before:transition-all before:duration-500 after:absolute
                after:left-[-15px] after:top-[70%] after:-z-10 after:h-5 after:w-5 after:translate-y-0 after:transition-all
                after:duration-500 hover:before:translate-y-[-20px] hover:after:translate-y-[-20px] md:text-5xl">
          {{ t('header') }}
        </h1>
        <p class=" text-lg font-bold">
          {{ t('subheader') }}
        </p>
      </div>
      <form
        (submit)="submitForm($event)"
        class="form-control flex w-full flex-col items-center gap-3 md:max-w-md">
        <div class="w-full">
          <div class="form-control">
            <ng-container
              #name="field"
              [tanstackField]="contactForm"
              [validators]="{ onBlur:nameValidator }"
              name="name"
            >
              <label [for]="name.api.name" class="label">
                <span class="label-text font-extrabold">{{ t('name') }}</span>
              </label>
              <input
                (blur)="name.api.handleBlur()"
                (input)="name.api.handleChange($any($event).target.value)"
                [id]="name.api.name"
                [name]="name.api.name"
                [value]="name.api.state.value"
                class="input input-bordered w-full"
                placeholder="{{ t('type-here') }}"
                type="text"
              />
              @if (name.api.state.meta.touchedErrors.length > 0) {
                <label class="label">
              <span class="label-text-alt text-error font-bold">{{
                  t('name-error')
                }}</span>
                </label>
              }
            </ng-container>
          </div>
        </div>
        <div class="w-full">
          <div class="form-control">
            <ng-container
              #email="field"
              [tanstackField]="contactForm"
              [validators]="{onBlur:emailValidator}"
              name="email"
            >
              <label [for]="email.api.name" class="label">
                <span class="label-text font-extrabold">{{ t('email') }}</span>
              </label>
              <input
                (blur)="email.api.handleBlur()"
                (input)="email.api.handleChange($any($event).target.value)"
                [id]="email.api.name"
                [name]="email.api.name"
                [value]="email.api.state.value"
                class="input input-bordered w-full"
                placeholder="{{ t('email-placeholder') }}"
                type="email"
              />
              @if (email.api.state.meta.errors.length > 0) {
                @if (email.api.state.meta.errors[0].includes('required')) {
                  <label class="label">
              <span class="label-text-alt text-error font-bold">{{
                  t('email-error-one')
                }}</span>
                  </label>
                } @else {
                  <label class="label">
              <span class="label-text-alt text-error font-bold">{{
                  t('email-error-two')
                }}</span>
                  </label>
                }
              }
            </ng-container>
          </div>
        </div>
        <div class="w-full">
          <div class="form-control">
            <ng-container
              #message="field"
              [tanstackField]="contactForm"
              [validators]="{onBlur:messageValidator}"
              name="message"
            >
              <label [for]="message.api.name" class="label">
                <span class="label-text font-extrabold">{{ t('message') }}</span>
              </label>
              <textarea
                (blur)="message.api.handleBlur()"
                (input)="message.api.handleChange($any($event).target.value)"
                [id]="message.api.name"
                [name]="message.api.name"
                [value]="message.api.state.value"
                class="textarea textarea-bordered h-24 text-base"
                placeholder="{{ t('say-hi') }}"></textarea>
              @if (message.api.state.meta.touchedErrors.length > 0) {
                <label class="label">
              <span class="label-text-alt text-error font-bold">{{
                  t('message-error')
                }}</span>
                </label>
              }
            </ng-container>
          </div>
        </div>
        <div class="mt-2 flex w-full justify-center gap-4">
          <button
            [class.spinner-loading]="isSubmitting() && canSubmit()"
            [disabled]="!canSubmit()"
            class="btn btn-outline btn-info relative w-1/3"
            type="submit">
            {{ t('send') }}
          </button>
          <button
            (click)="contactForm.reset()"
            class="btn btn-outline btn-secondary w-1/3"
            type="reset">
            {{ t('clear') }}
          </button>
        </div>
      </form>
    </div>
  </ng-container
  >
</template>
