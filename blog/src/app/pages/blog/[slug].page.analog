<script lang="ts">
  import { RouteMeta } from '@analogjs/router';
  import { postMetaResolver, postTitleResolver } from '../../models/resolvers';
  import { injectContent, injectContentFiles, MarkdownComponent } from '@analogjs/content';
  import { Router, RouterLink } from '@angular/router';
  import { TranslocoDirective, TranslocoService } from '@ngneat/transloco';
  import { inject, Injector, runInInjectionContext } from '@angular/core';
  import { combineLatest, map, of, Subject, switchMap, takeUntil } from 'rxjs';
  import { PostAttributes } from '../../models/post.model';
  import { toSignal } from '@angular/core/rxjs-interop';
  import { DateTime } from 'luxon';
  import { NgOptimizedImage } from '@angular/common';

  export const routeMeta: RouteMeta = {
    title: postTitleResolver,
    meta: postMetaResolver,
  };

  defineMetadata({
    imports: [MarkdownComponent, RouterLink, TranslocoDirective, NgOptimizedImage],
    host: { class: 'px-0' },
  });

  const transloco = inject(TranslocoService);
  const router = inject(Router);
  const injector = inject(Injector);
  const destroy$ = new Subject<boolean>();

  const allFiles = injectContentFiles<PostAttributes>();
  const post = toSignal(
    transloco.langChanges$.pipe(
      switchMap(lang => {
        return combineLatest([
          of(
            allFiles.filter(file => file.filename.split('/')[3] === lang),
          ),
          runInInjectionContext(injector, () => {
            return injectContent<PostAttributes>({
              param: 'slug',
              subdirectory: lang,
            });
          }),
        ]).pipe(
          map(([files, post]) => {
            const sortedFiles = files
              .map(file => ({
                ...file,
                attributes: {
                  ...file.attributes,
                  date: DateTime.fromFormat(
                    file.attributes.date,
                    'MM-dd-yyyy',
                  ).toISODate()!,
                },
              }))
              .sort(
                (a, b) =>
                  DateTime.fromISO(b.attributes.date).toMillis() -
                  DateTime.fromISO(a.attributes.date).toMillis(),
              );
            const index = sortedFiles.findIndex(
              file => file.attributes.slug === post?.attributes.slug,
            );
            return {
              ...post,
              nextPost: sortedFiles[index - 1]?.slug,
              previousPost: sortedFiles[index + 1]?.slug,
            };
          }),
        );
      }),
    ),
    { initialValue: null },
  );

  onInit(() => {
    transloco.langChanges$
      .pipe(takeUntil(destroy$))
      .subscribe(lang => {
        const currentRoute = router.url;
        // Update the route based on the new language
        const newRoute = this.updateRouteBasedOnLanguage(currentRoute, lang);
        router.navigate([newRoute]);
      });
  });

  function updateRouteBasedOnLanguage(route: string, lang: string): string {
    const segments = route.split('/');
    const file = this.allFiles.find(file => file.slug === segments[2]);
    const fileLang = file?.filename.split('/')[3];
    if (fileLang === lang) {
      return route;
    }
    const otherSlug = file?.attributes.otherSlug;
    segments[2] = otherSlug || segments[2];
    return segments.join('/');
  }

</script>

<template>
  <ng-container *transloco="let t; read: 'blog'">
    @if (post()) {
      <article
        class="text-primary-content flex w-full flex-auto flex-col items-center gap-4 overflow-auto">
        <section
          class="mb-4 flex w-full flex-auto flex-row justify-between gap-4 lg:w-3/5">
          <button
            [routerLink]="['/blog', post()?.previousPost]"
            [disabled]="!post()?.previousPost"
            class="btn btn-accent w-28"
            type="button"
            attr.aria-label="{{ t('aria-previous') }}">
            {{ t('previous') }}
          </button
          >
          <button
            [routerLink]="['/blog', post()?.nextPost]"
            [disabled]="!post()?.nextPost"
            class="btn btn-accent w-28"
            type="button"
            attr.aria-label="{{ t('aria-next') }}">
            {{ t('next') }}
          </button>
        </section>
        <img [ngSrc]="post()?.attributes?.coverImage" width="1000"
             height="420" priority>
        <h1 class="self-center text-center text-3xl font-extrabold lg:w-3/5">
          {{ post()?.attributes?.title }}
        </h1>
        <div
          class="line-numbers blog-post container w-full pb-8 pt-4 md:w-11/12 md:px-0 lg:w-3/5">
          <analog-markdown [content]="post()?.content" />
        </div>
      </article>
    }
  </ng-container>
</template>
